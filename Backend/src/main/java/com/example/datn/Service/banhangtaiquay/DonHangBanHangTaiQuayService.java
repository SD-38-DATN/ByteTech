  package com.example.datn.Service.banhangtaiquay;

import com.example.datn.DTO.dtoBanHangTaiQuay.*;
import com.example.datn.Model.*;
import com.example.datn.Repository.BanHangTaiQuay.*;
import com.example.datn.Repository.UsersRepository;
import com.example.datn.Repository.BienTheSanPhamRepository;
import com.example.datn.Repository.BienThePhuKienRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class DonHangBanHangTaiQuayService {
    
    private final DonHangBanHangTaiQuayRepository donHangRepository;
    private final DonHangChiTietBanHangTaiQuayRepository chiTietDonHangRepository;
    private final IMEIBanHangTaiQuayRepository imeiRepository;
    private final UsersBanHangTaiQuayRepository usersRepository;
    private final BienTheSanPhamBanHangTaiQuayRepository bienTheSanPhamRepository;
    private final BienThePhuKienBanHangTaiQuayRepository bienThePhuKienRepository;
    
    /**
     * L∆∞u ƒë∆°n h√†ng - KH√îNG tr·ª´ kho, KH√îNG gi·∫£m voucher
     * Tr·∫°ng th√°i: Ch·ªù thanh to√°n
     * Logic: LU√îN T·∫†O ƒê∆†N H√ÄNG M·ªöI
     */
    @Transactional
    public DonHangBanHangTaiQuayDTO luuDon(LuuDonRequest request) {
        try {
            System.out.println("üîç DEBUG: LuuDonRequest = " + request);
            System.out.println("üîç DEBUG: UserId = " + request.getUserId());
            System.out.println("üîç DEBUG: ChiTietDonHangs = " + request.getChiTietDonHangs());
            
            // ‚úÖ LU√îN T·∫†O ƒê∆†N H√ÄNG M·ªöI - KH√îNG C·∫¶N CHECK ƒê∆†N H√ÄNG ƒê√É L∆ØU
            Users user = usersRepository.findById(request.getUserId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + request.getUserId()));
            
            UserVoucher userVoucher = null;
            if (request.getUserVoucherId() != null) {
                userVoucher = new UserVoucher();
                userVoucher.setId(request.getUserVoucherId());
            }
            
            DonHang donHang = new DonHang();
            donHang.setUser(user);
            donHang.setNgayDat(LocalDateTime.now());
            donHang.setUserVoucher(userVoucher);
            System.out.println("üÜï T·∫°o ƒë∆°n h√†ng m·ªõi (lu√¥n t·∫°o m·ªõi)");
            
            // C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
            donHang.setTrangThai(1); // Tr·∫°ng th√°i: 1 = Ch·ªù thanh to√°n
            donHang.setTongTien(request.getTongTien());
            donHang.setDiaChiGiaoHang(request.getDiaChiGiaoHang());
            donHang.setSoDienThoai(request.getSoDienThoai());
            donHang.setPhuongThucThanhToan(request.getPhuongThucThanhToan());
            donHang.setGhiChu(request.getGhiChu());
            
            // C·∫≠p nh·∫≠t UserVoucher n·∫øu c√≥
            if (request.getUserVoucherId() != null) {
                UserVoucher userVoucherId = new UserVoucher();
                userVoucher.setId(request.getUserVoucherId());
                donHang.setUserVoucher(userVoucher);
            }
            
            DonHang savedDonHang = donHangRepository.save(donHang);
            
            // T·∫°o chi ti·∫øt ƒë∆°n h√†ng (KH√îNG tr·ª´ kho)
            for (ChiTietDonHangBanHangTaiQuayDTO chiTietDTO : request.getChiTietDonHangs()) {
                ChiTietDonHang chiTiet = new ChiTietDonHang();
                chiTiet.setDonHang(savedDonHang);
                chiTiet.setSoLuong(chiTietDTO.getSoLuong());
                chiTiet.setGia(chiTietDTO.getGia());
                
                // X·ª≠ l√Ω logic maSKU v√† maSKUPhuKien - L·∫§Y T·ª™ DATABASE
                if ("sanpham".equals(chiTietDTO.getLoaiSanPham())) {
                    // S·∫£n ph·∫©m ch√≠nh - t√¨m t·ª´ database
                    BienTheSanPham bienTheSanPham = bienTheSanPhamRepository.findByMaSKU(chiTietDTO.getMaSKU())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m v·ªõi SKU: " + chiTietDTO.getMaSKU()));
                    chiTiet.setBienTheSanPham(bienTheSanPham);
                } else if ("phukien".equals(chiTietDTO.getLoaiSanPham())) {
                    // Ph·ª• ki·ªán - t√¨m t·ª´ database
                    BienThePhuKien bienThePhuKien = bienThePhuKienRepository.findByMaSKUPhuKien(chiTietDTO.getMaSKUPhuKien())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien()));
                    chiTiet.setBienThePhuKien(bienThePhuKien);
                }
                
                // X·ª≠ l√Ω IMEI n·∫øu c√≥ - C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI T·∫†M GI·ªÆ
                if (chiTietDTO.getImeiId() != null) {
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω IMEI v·ªõi ID: " + chiTietDTO.getImeiId());
                    IMEI imei = imeiRepository.findById(chiTietDTO.getImeiId()).orElse(null);
                    if (imei != null) {
                        chiTiet.setImei(imei);
                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i IMEI = 5 (t·∫°m gi·ªØ)
                        imei.setTrangThai(5);
                        imeiRepository.save(imei);
                        System.out.println("‚úÖ DEBUG: ƒê√£ c·∫≠p nh·∫≠t IMEI sang tr·∫°ng th√°i t·∫°m gi·ªØ");
                    } else {
                        System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng t√¨m th·∫•y IMEI v·ªõi ID: " + chiTietDTO.getImeiId());
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è DEBUG: Kh√¥ng c√≥ IMEI cho s·∫£n ph·∫©m n√†y");
                }
                
                chiTietDonHangRepository.save(chiTiet);
            }
            
            return convertToDTO(savedDonHang);
            
        } catch (Exception e) {
            throw new RuntimeException("L·ªói khi l∆∞u ƒë∆°n h√†ng: " + e.getMessage(), e);
        }
    }
    
    /**
     * Thanh to√°n ƒë∆°n h√†ng - C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ "Ch·ªù thanh to√°n" sang "ƒê√£ thanh to√°n"
     * IMEI status = 0 (ƒë√£ b√°n)
     * Logic: LU√îN T·∫†O ƒê∆†N H√ÄNG M·ªöI
     */
    @Transactional
    public DonHangBanHangTaiQuayDTO thanhToan(ChotDonRequest request) {
        try {
            // ‚úÖ LU√îN T·∫†O ƒê∆†N H√ÄNG M·ªöI - KH√îNG C·∫¶N CHECK ƒê∆†N H√ÄNG ƒê√É L∆ØU
            Users user = usersRepository.findById(request.getUserId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + request.getUserId()));
            
            UserVoucher userVoucher = null;
            if (request.getUserVoucherId() != null) {
                userVoucher = new UserVoucher();
                userVoucher.setId(request.getUserVoucherId());
            }
            
            DonHang donHang = new DonHang();
            donHang.setUser(user);
            donHang.setNgayDat(LocalDateTime.now());
            donHang.setUserVoucher(userVoucher);
            System.out.println("üÜï T·∫°o ƒë∆°n h√†ng m·ªõi (lu√¥n t·∫°o m·ªõi)");
            
            // C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
            donHang.setTrangThai(2); // Tr·∫°ng th√°i: 2 = ƒê√£ thanh to√°n
            donHang.setTongTien(request.getTongTien());
            donHang.setDiaChiGiaoHang(request.getDiaChiGiaoHang());
            donHang.setSoDienThoai(request.getSoDienThoai());
            donHang.setPhuongThucThanhToan(request.getPhuongThucThanhToan());
            donHang.setGhiChu(request.getGhiChu());
            
            // C·∫≠p nh·∫≠t UserVoucher n·∫øu c√≥
            if (request.getUserVoucherId() != null) {
                UserVoucher userVoucherId = new UserVoucher();
                userVoucher.setId(request.getUserVoucherId());
                donHang.setUserVoucher(userVoucher);
            }
            
            DonHang savedDonHang = donHangRepository.save(donHang);
            
            // T·∫°o chi ti·∫øt ƒë∆°n h√†ng v√† TR·ª™ KHO
            for (ChiTietDonHangBanHangTaiQuayDTO chiTietDTO : request.getChiTietDonHangs()) {
                System.out.println("üîç DEBUG: X·ª≠ l√Ω chi ti·∫øt ƒë∆°n h√†ng: " + chiTietDTO);
                System.out.println("üîç DEBUG: Lo·∫°i s·∫£n ph·∫©m: " + chiTietDTO.getLoaiSanPham());
                System.out.println("üîç DEBUG: MaSKU: " + chiTietDTO.getMaSKU());
                System.out.println("üîç DEBUG: MaSKUPhuKien: " + chiTietDTO.getMaSKUPhuKien());
                
                ChiTietDonHang chiTiet = new ChiTietDonHang();
                chiTiet.setDonHang(savedDonHang);
                chiTiet.setSoLuong(chiTietDTO.getSoLuong());
                chiTiet.setGia(chiTietDTO.getGia());
                
                // X·ª≠ l√Ω logic maSKU v√† maSKUPhuKien - L·∫§Y T·ª™ DATABASE
                if ("sanpham".equals(chiTietDTO.getLoaiSanPham())) {
                    // S·∫£n ph·∫©m ch√≠nh - t√¨m t·ª´ database
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω s·∫£n ph·∫©m ch√≠nh v·ªõi SKU: " + chiTietDTO.getMaSKU());
                    BienTheSanPham bienTheSanPham = bienTheSanPhamRepository.findByMaSKU(chiTietDTO.getMaSKU())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m v·ªõi SKU: " + chiTietDTO.getMaSKU()));
                    chiTiet.setBienTheSanPham(bienTheSanPham);
                    System.out.println("‚úÖ DEBUG: ƒê√£ t√¨m th·∫•y s·∫£n ph·∫©m ch√≠nh: " + bienTheSanPham.getMaSKU());
                } else if ("phukien".equals(chiTietDTO.getLoaiSanPham())) {
                    // Ph·ª• ki·ªán - t√¨m t·ª´ database
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien());
                    BienThePhuKien bienThePhuKien = bienThePhuKienRepository.findByMaSKUPhuKien(chiTietDTO.getMaSKUPhuKien())
                            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ph·ª• ki·ªán v·ªõi SKU: " + chiTietDTO.getMaSKUPhuKien()));
                    chiTiet.setBienThePhuKien(bienThePhuKien);
                    System.out.println("‚úÖ DEBUG: ƒê√£ t√¨m th·∫•y ph·ª• ki·ªán: " + bienThePhuKien.getMaSKUPhuKien());
                } else {
                    System.out.println("‚ö†Ô∏è DEBUG: Lo·∫°i s·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh: " + chiTietDTO.getLoaiSanPham());
                }
                
                // X·ª≠ l√Ω IMEI n·∫øu c√≥ - C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI ƒê√É B√ÅN
                if (chiTietDTO.getImeiId() != null) {
                    System.out.println("üîç DEBUG: X·ª≠ l√Ω IMEI v·ªõi ID: " + chiTietDTO.getImeiId());
                    IMEI imei = imeiRepository.findById(chiTietDTO.getImeiId()).orElse(null);
                    if (imei != null) {
                        chiTiet.setImei(imei);
                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i IMEI = 0 (ƒë√£ b√°n)
                        imei.setTrangThai(0);
                        imeiRepository.save(imei);
                        System.out.println("‚úÖ DEBUG: ƒê√£ c·∫≠p nh·∫≠t IMEI sang tr·∫°ng th√°i ƒë√£ b√°n");
                    } else {
                        System.out.println("‚ö†Ô∏è DEBUG: Kh√¥ng t√¨m th·∫•y IMEI v·ªõi ID: " + chiTietDTO.getImeiId());
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è DEBUG: Kh√¥ng c√≥ IMEI cho s·∫£n ph·∫©m n√†y");
                }
                
                chiTietDonHangRepository.save(chiTiet);
            }
            
            return convertToDTO(savedDonHang);
            
        } catch (Exception e) {
            throw new RuntimeException("L·ªói khi thanh to√°n ƒë∆°n h√†ng: " + e.getMessage(), e);
        }
    }
    
    /**
     * Convert DonHang entity to DTO
     */
    private DonHangBanHangTaiQuayDTO convertToDTO(DonHang donHang) {
        List<ChiTietDonHangBanHangTaiQuayDTO> chiTietDTOs = donHang.getChiTietDonHangs() != null ?
                donHang.getChiTietDonHangs().stream()
                        .map(this::convertChiTietToDTO)
                        .collect(Collectors.toList()) : null;
        
        // T·∫°o DTO b·∫±ng constructor thay v√¨ builder
        DonHangBanHangTaiQuayDTO dto = new DonHangBanHangTaiQuayDTO();
        dto.setMaDonHang(donHang.getMaDonHang());
        dto.setUserId(donHang.getUser().getId());
        dto.setNgayDat(donHang.getNgayDat());
        dto.setTrangThai(donHang.getTrangThai());
        dto.setTongTien(donHang.getTongTien());
        dto.setDiaChiGiaoHang(donHang.getDiaChiGiaoHang());
        dto.setSoDienThoai(donHang.getSoDienThoai());
        dto.setPhuongThucThanhToan(donHang.getPhuongThucThanhToan());
        dto.setGhiChu(donHang.getGhiChu());
        dto.setUserVoucherId(donHang.getUserVoucher() != null ? donHang.getUserVoucher().getId() : null);
        dto.setChiTietDonHangs(chiTietDTOs);
        return dto;
    }
    
    /**
     * Convert ChiTietDonHang entity to DTO
     */
    private ChiTietDonHangBanHangTaiQuayDTO convertChiTietToDTO(ChiTietDonHang chiTiet) {
        String loaiSanPham = null;
        String maSKU = null;
        String maSKUPhuKien = null;
        
        if (chiTiet.getBienTheSanPham() != null) {
            loaiSanPham = "sanpham";
            maSKU = chiTiet.getBienTheSanPham().getMaSKU();
        } else if (chiTiet.getBienThePhuKien() != null) {
            loaiSanPham = "phukien";
            maSKUPhuKien = chiTiet.getBienThePhuKien().getMaSKUPhuKien();
        }
        
        // T·∫°o DTO b·∫±ng constructor thay v√¨ builder
        ChiTietDonHangBanHangTaiQuayDTO dto = new ChiTietDonHangBanHangTaiQuayDTO();
        dto.setId(chiTiet.getId());
        dto.setMaDonHang(chiTiet.getDonHang().getMaDonHang());
        dto.setMaSKU(maSKU);
        dto.setMaSKUPhuKien(maSKUPhuKien);
        dto.setImeiId(chiTiet.getImei() != null ? chiTiet.getImei().getId() : null);
        dto.setSoLuong(chiTiet.getSoLuong());
        dto.setGia(chiTiet.getGia());
        dto.setLoaiSanPham(loaiSanPham);
        return dto;
    }
}
